1. Instalar whitenoise e gunicorn
$ pip3 install whitenoise gunicorn
# whitenoise -> Para cuidar dos arquivos estáticos, já que o Django não cuida desses arquivos em modo de produção.
# gunicorn -> Rodar a aplicação Django no servidor.
!OPCIONAL: # dj_database_url e psycopg2-binary-> Isso serve para quando está utilizando mysql e quer upar no Heroku, o Heroku não aceitar nada além do postgresql, essa biblioteca envia a configuração default da variavel DATABASES do django para o heroku. {
    DATABASES = {
        'default': dj_database_url.config()
    }
}

2. No settings.py

    2.1 Configurar a variável ALLOWED_HOST

    2.2 Na variável MIDDLEWARE, colocar como segundo item da lista: "whitenoise.middleware.WhiteNoiseMiddleware"


!Opcional: Configurar .gitignore {
    DjangoEnv
    __pycache__
    *.*~
    *.pyc
    .idea
}

3. Ter conta no Heroku

4. Seguir configuração do Heroku CLI: https://devcenter.heroku.com/articles/getting-started-with-python

    4.1 Após instalar, executar o heroku na máquina e fazer login:
    $ heroku login
    
5. Criar arquivo "runtime.txt" no diretório do projeto

    5.1 Colocar versão do python nesse arquivo. Ex: python-3.7.8

5. Criar/atualizar requirements.txt
$ pip3 freeze > requirements.txt

6. Criar arquivo "Procfile" no diretório do projeto.

    6.1 Colocar dentro do arquivo (Para exemplo, o nome do projeto é django1) -> web: gunicorn django1.wsgi --log-file -

7. Criar uma aplicação heroku:
   # O nome da aplicação não pode existir, pois o nome vai ser usado como dominio
   Ex: heroku create djangoproject --buildpack heroku/python

8. CASO O PROJETO SE ENCONTRA EM UM SUBDIRETÓRIO E NÃO NA RAIZ DO REPOSITÓRIO:
    link: https://medium.com/@shalandy/deploy-git-subdirectory-to-heroku-ea05e95fce1f
    Ex: $ git subtree push --prefix path/to/subdirectory heroku master
